<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Nagy\LaravelRating\Traits\Rate\Rateable;
use Nagy\LaravelRating\Traits\Like\Likeable;
class Product extends Model
{
    use HasFactory,Rateable,Likeable;
    protected $fillable=['name','price','department_id','note','Mimg','imgs','brand_id','discrip','modal'];
    protected $casts=[
        'imgs'=>'array',
        'discrip'=>'array',
        'created_at'=>'datetime:Y-m-d',
        'updated_at'=>'datetime:Y-m-d'
    ];



    public function brand()
    {
        return $this->belongsTo(Brand::class);
        # code...
    }
    public function vzt(){
        //return $this->mo
       // return $this->hasMany('visits','score','products.id');
     return visits($this)->relation();
  //   return visits($this)->count();

    }


    public function parts()
    {
        return $this->belongsToMany(Part::class);
        # code...
    }

    public  function  department(){
        return $this->belongsTo(Department::class);
    }

    public function normalorders(){

        return $this->belongsToMany(NormalOrder::class,"normalorder_product")->withPivot("qun");

    }


    public function sumofqunorders(){


        //return  $this->withSum("orders","qun");
        return $this->hasMany(Order::class)->Sum("qun");
    }



    public function countoforders(){

        return $this->normalorders()->count()
            +$this->orders()->count()+
            $this->cartorders()->count()+
            $this->cartordernromals()->count();
    }

    public  function reats(){
        return $this->hasMany(Reat::class);
    }

    public function reatsAvga(){
        return $this->reats()->avg('value');
    }

    public function cartorders(){
        return $this->belongsToMany(CartOrder::class);
    }
    public function orders(){
        return $this->belongsToMany(Order::class,"order_product")->withPivot("qun");
    }

    public function cartordernromals(){
        return $this->belongsToMany(Cartordernormal::class);
    }


    public function delete()
    {

     //   $this->normalorders()->delete();
       // $this->cartordernromals()->delete();
        return parent::delete(); // TODO: Change the autogenerated stub
    }


}
