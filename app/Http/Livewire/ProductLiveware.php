<?php

namespace App\Http\Livewire;

use App\Models\Department;
use App\Models\Product;
use App\Models\Reat;
use Illuminate\Foundation\Console\ViewCacheCommand;
use Illuminate\Support\Facades\Cache;
use Illuminate\View\View;
use Livewire\Component;
use Livewire\WithPagination;
use Gloudemans\Shoppingcart\Facades\Cart;
use Illuminate\Support\Facades\Config;

class ProductLiveware extends Component
{
    public $deptid="all";
    public $proid="no";
    public $search='';
    public $byprice="DESC";
    public $bydate="DESC";
    public $openTab=1;
    public $barnd="no";
    public $part='no';

    public array $qun=[];

    protected $listeners=['addneworder'=>'resetopid'
        ,'resetorderproid'=>'resetopid',
        'addnewcomment'=>'resetopid'
    ];


    public $openmodal=0;

    public function getQueryString()
    {

        return ['search'=>$this->search,'page']; // TODO: Change the autogenerated stub
    }

    protected $queryString=['search','page'];

    public function mount($deptid="all",$proid="no",$barnd="no"){
        $this->proid=$proid;
        $this->deptid=$deptid;
        $this->barnd=$barnd;
    }
    public function subsearch(){

        $this->search=$this->search;
        $this->proid='no';
    }
    use WithPagination;
    public function render()
    {



        // Cache::flush();

        $cart=Cart::instance('wishlist')->content();
        $shopcart=Cart::instance('shopcart')->content();


        if($this->proid =="no"){


            if($this->part!="no"){

                $products=Product::whereHas('parts',function($query){
                    $query->where('id','=',$this->part);
                })->where('name','LIKE' ,'%'.$this->search.'%')
                ->orderBy('price',$this->byprice)
                ->orderBy('updated_at',$this->bydate)
                ->paginate(6);

                // return dd($products);
                return  view('livewire.product-liveware',
                    ['deptid'=>$this->deptid,
                        'proid'=>$this->proid,
                        'products'=>$products,
                        'cart'=>$cart,
                        'shopcart'=>$shopcart])
                    ->layout('layouts.base-layout');

            }









            if($this->deptid=="all"){
                $products= Cache::remember(
                    'productsall'.$this->page.$this->search.$this->byprice.$this->bydate,
                    60*60*24,function (){
                   return
                       Product::where('name','LIKE' ,'%'.$this->search.'%')
                           ->orderBy('price',$this->byprice)
                           ->orderBy('updated_at',$this->bydate)
                           ->paginate(6);
                });

                return  view('livewire.product-liveware',
                    ['deptid'=>$this->deptid,
                        'proid'=>$this->proid,
                        'products'=>$products,
                        'cart'=>$cart,
                        'shopcart'=>$shopcart])
                    ->layout('layouts.base-layout');


            }
            else
            {
                $products= Cache::remember(
                    'productsdept'.$this->deptid.$this->page.$this->search.$this->byprice.$this->bydate
                    ,60*60*24,function () {

                    return Product::where('department_id', $this->deptid)->where('name', 'LIKE', '%' . $this->search . '%')
                        ->orderBy('price', $this->byprice)
                        ->orderBy('updated_at', $this->bydate)
                        ->paginate(6);
                });
                return view('livewire.product-liveware',
                    ['deptid'=>$this->deptid,
                        'proid'=>$this->proid,
                        'products'=>$products,
                        'cart'=>$cart,
                        'shopcart'=>$shopcart])->layout('layouts.base-layout');

            }








        }
        else {

            $product=Product::withCount('vzt as vzt_count')->find($this->proid);

            if($product==null)
            abort(404);
            visits($product)->increment();
;
            $comments =Reat::where('product_id',$product->id)
                ->with('user:id,name,email')->orderBy('created_at','DESC')->take(5)->get();
            return view('livewire.product-liveware',
                ['deptid'=>$this->deptid,
                    'proid'=>$this->proid,
                    'product'=>$product,
                    'cart'=>$cart,
                    'shopcart'=>$shopcart,
                    'comments'=>$comments,
                    'visit'=>$product->vzt_count,
                ])->layout('layouts.base-layout');


        }


        return view('livewire.product-liveware',['deptid'=>$this->deptid,'proid'=>$this->proid
            ,'cart'=>$cart,
            'shopcart'=>$shopcart])->layout('layouts.base-layout');
    }


    public function resetopid(){
        $this->openmodal=0;
       // $this->resolvePage();
        //$this->resetPage($this->page);
        //$this->resolvePage();
        //$this->render();
        //$this->reset(['proid']);
        //$this->redirect(request()->url());

    }
    public function openmodalme(){
        $this->openmodal=1;
    }


    public function updatedDeptid(){
        $this->deptid=$this->deptid;
        $this->proid="no";

        $this->barnd='no';
        $this->resetPage();
    }



    public function come_back()
    {
        $this->proid="no";

        $this->barnd='no';
        $this->resetPage();
        # code...
    }


    public function changeDept($deptid){
        $this->deptid=$deptid;
        $this->proid="no";

        $this->barnd='no';
        $this->resetPage();
    }

    public function setPart($id)
    {
        $this->part=$id;
        $this->proid="no";

        $this->resetPage();
        # code...
    }
    public function setBrand($b){
        $this->deptid="all";
        $this->proid="no";
        $this->barnd=$b;
        $this->resetPage();
    }
    public function changePro($proid){
        $this->proid=$proid;
    }

    public function like($id){
        $pro=Product::find($id);
        Cart::instance('wishlist');
        Cart::add(
            $pro->id,
            $pro->name,
            1,
            $pro->price,
            0,
            ['img'=>$pro->Mimg]
        );
    }


    public function dislike($rowId){


        Cart::instance('wishlist')->remove($rowId);

    }





    public  function addtocart($id){

        $pro=Product::find($id);

        Cart::instance('shopcart');

        Cart::add(
          $pro->id,
          $pro->name,
            1,
            $pro->price,
            0,
            ['img'=>$pro->Mimg

            ]
        );

        return;

    }
    public function delprocart($rowId){
        Cart::instance('shopcart')->remove($rowId);
    }

public function  plusqun($id){

        $this->qun[$id]++;
}
public function  munsqun($id){

        if($this->qun[$id]>1)
            $this->qun[$id]--;

}



}
